@model PagedList.IPagedList<MachineLogViewer.Models.EditUserViewModel>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css"/>

@{
    ViewBag.Title = "Users";
}

<h2>@ViewBag.Title</h2>

<p>
    <a href="@Url.Action("Register", "Account")" class="btn btn-success">
        <span class="glyphicon glyphicon-plus-sign"></span>
        Create New
    </a>
</p>
<table class="table table-striped">
    <tr>
        <th>
            @Html.ActionLink("User Name", "Index", new { sortOrder = ViewBag.NameSortParm })
            @if (string.IsNullOrEmpty(ViewBag.CurrentSort))
            {
                <span class="glyphicon glyphicon-arrow-down"></span>
            }
            else if (ViewBag.CurrentSort == "name_desc")
            {
                <span class="glyphicon glyphicon-arrow-up"></span>
            }
        </th>
        <th>
            @Html.ActionLink("Description", "Index", new { sortOrder = ViewBag.DescrSortParm })
            @if (ViewBag.CurrentSort == "Descr")
            {
                <span class="glyphicon glyphicon-arrow-down"></span>
            }
            else if (ViewBag.CurrentSort == "descr_desc")
            {
                <span class="glyphicon glyphicon-arrow-up"></span>
            }
        </th>
        <th>
            @Html.ActionLink("Active?", "Index", new { sortOrder = ViewBag.ActiveSortParm })
            @if (ViewBag.CurrentSort == "Active")
            {
                <span class="glyphicon glyphicon-arrow-down"></span>
            }
            else if (ViewBag.CurrentSort == "active_desc")
            {
                <span class="glyphicon glyphicon-arrow-up"></span>
            }
        </th>
        <th>
            @Html.ActionLink("Admin?", "Index", new { sortOrder = ViewBag.AdminSortParm })
            @if (ViewBag.CurrentSort == "Admin")
            {
                <span class="glyphicon glyphicon-arrow-down"></span>
            }
            else if (ViewBag.CurrentSort == "admin_desc")
            {
                <span class="glyphicon glyphicon-arrow-up"></span>
            }
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.UserName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Description)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.IsActive)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.IsAdmin)
        </td>
        <td>
            <div class="pull-left">
                <div class="button-group">
                    <a href="@Url.Action("Edit", "Account", new {id = item.Id})" class="btn btn-default btn-sm" title="Edit">
                        <span class="glyphicon glyphicon-pencil"></span>
                    </a>
                    <a href="@Url.Action("IndexByUser", "Machine", new { userId = item.Id })" class="btn btn-default btn-sm" title="Machines">
                        <span class="glyphicon glyphicon-list"></span>
                    </a>
                    <a href="@Url.Action("ResetPassword", "Account", new {id = item.Id})" class="btn btn-default btn-sm" title="Reset password">
                        <span class="glyphicon glyphicon-cog"></span>
                    </a>
                    <a href="@Url.Action("Delete", "Account", new {id = item.Id})" class="btn btn-default btn-sm" title="Delete">
                        <span class="glyphicon glyphicon-trash"></span>
                    </a>
                    @*@Html.ActionLink("Edit", "Edit", new {id = item.Id}) |
                    <a href="@Url.Action("IndexByUser", "Machine", new {userId = item.Id})">Machines</a> |
                    @Html.ActionLink("Reset password", "ResetPassword", new {id = item.Id}) |
                    @Html.ActionLink("Delete", "Delete", new {id = item.Id})*@

                </div>
            </div>
        </td>
    </tr>
}

</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort }))